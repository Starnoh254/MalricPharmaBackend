name: Deploy to VPS

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Deploy to VPS using SSH
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e  # Exit on any error

            echo "🚀 Starting MalricPharma Backend Deployment..."
            echo "📅 Deployment started at: $(date)"

            # Navigate to the correct application directory
            echo "📂 Navigating to application directory..."
            cd /var/www/malricpharma/MalricPharmaBackend || { echo "❌ Failed to navigate to app directory"; exit 1; }

            # Show current status before deployment
            echo "📊 Current application status:"
            pm2 status malricpharma-backend || echo "⚠️ Application not running"

            # Create backup of current version
            echo "💾 Creating backup..."
            BACKUP_DIR="$HOME/backups/malricpharma"
            mkdir -p $BACKUP_DIR
            tar -czf $BACKUP_DIR/app_backup_$(date +%Y%m%d_%H%M%S).tar.gz . || echo "⚠️ Backup creation failed"

            # Pull latest changes
            echo "📥 Pulling latest changes from main branch..."
            git fetch origin
            git reset --hard origin/main

            # Check Node.js version and ensure nvm is loaded
            echo "🔍 Checking Node.js version..."

            # Load nvm if available
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Load nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # Load nvm bash_completion

            # Use nvm default if available, otherwise use system node
            if command -v nvm &> /dev/null; then
                nvm use default || echo "⚠️ nvm default not set, using current version"
            fi

            NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
            echo "Current Node.js version: $(node --version)"
            echo "Current npm version: $(npm --version)"

            if [ "$NODE_VERSION" -lt 16 ]; then
                echo "⚠️ Node.js version is too old (v$NODE_VERSION). Need to use nvm or update system Node.js..."
                echo "❌ Current Node.js version is incompatible. Please ensure nvm is properly configured."
                exit 1
            else
                echo "✅ Node.js version is compatible"
            fi

            # Clean previous dependencies to avoid conflicts
            echo "🧹 Cleaning previous dependencies..."
            rm -rf node_modules package-lock.json

            # Install production dependencies only
            echo "📦 Installing production dependencies..."
            if npm install --production --silent; then
                echo "✅ Dependencies installed successfully"
            else
                echo "❌ Dependency installation failed"
                echo "📋 Checking npm debug log..."
                tail -20 ~/.npm/_logs/*.log 2>/dev/null || echo "No npm logs found"
                echo "🔄 Retrying with verbose output for debugging..."
                npm install --production --verbose
                exit 1
            fi

            # Install global dependencies if needed
            echo "🔧 Ensuring Prisma CLI is available..."
            if ! command -v prisma &> /dev/null; then
                npm install -g prisma@latest
            fi

            # Generate Prisma client
            echo "⚙️ Generating Prisma client..."
            npx prisma generate

            # Run database migrations with error handling
            echo "🗄️ Running database migrations..."
            if npx prisma migrate deploy; then
                echo "✅ Migrations completed successfully"
            else
                echo "❌ Migration failed, checking for failed migrations..."
                
                # Check migration status
                npx prisma migrate status
                
                # Try to resolve common P3009 error for the known failed migration
                echo "🔧 Attempting to resolve failed migrations..."
                npx prisma migrate resolve --rolled-back 20250626223539_initial 2>/dev/null || echo "No specific failed migration to resolve"
                
                # Retry migration
                echo "🔄 Retrying migrations..."
                if npx prisma migrate deploy; then
                    echo "✅ Migrations completed after resolution"
                else
                    echo "❌ Migration still failing, manual intervention required"
                    echo "📋 Migration status:"
                    npx prisma migrate status || echo "Could not get migration status"
                    exit 1
                fi
            fi

            # Check if PM2 app exists, if not create it
            if ! pm2 describe malricpharma-backend > /dev/null 2>&1; then
                echo "🆕 Creating new PM2 application..."
                pm2 start ecosystem.config.js --env production
            else
                echo "🔄 Restarting existing PM2 application..."
                pm2 restart malricpharma-backend
            fi

            # Save PM2 configuration
            pm2 save

            # Wait for app to start
            echo "⏳ Waiting for application to start..."
            sleep 10

            # Health check with better debugging
            echo "🏥 Performing health check..."
            echo "📊 Current PM2 status:"
            pm2 list

            # Check if any malricpharma process is online (flexible matching)
            if pm2 list | grep -E "(online|running)" | grep -i "malric"; then
                echo "✅ Application is running successfully!"
            else
                echo "❌ Application failed to start!"
                echo "📋 Last 20 log lines:"
                pm2 logs --lines 20
                echo "📊 Detailed PM2 status:"
                pm2 show malricpharma-backend || pm2 show malricph || echo "Could not find process details"
                exit 1
            fi

            # Show final status
            echo "📊 Final application status:"
            pm2 status

            # Test API endpoint if available
            echo "🧪 Testing API endpoint..."
            if curl -f -s https://api.malricpharma.co.ke/api/v1/health > /dev/null; then
                echo "✅ API endpoint is responding!"
            else
                echo "⚠️ API endpoint test failed (might be normal if health endpoint doesn't exist)"
            fi

            # Cleanup old backups (keep last 5)
            echo "🧹 Cleaning up old backups..."
            cd $BACKUP_DIR && ls -t app_backup_*.tar.gz 2>/dev/null | tail -n +6 | xargs -r rm || echo "No old backups to clean"

            echo "🎉 Deployment completed successfully!"
            echo "📅 Deployment finished at: $(date)"
